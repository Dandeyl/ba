<?php

class Obj_VulnerabilityList {
    protected $num_information = 0;
    protected $num_warnings = 0;
    protected $num_vulnerabilities = 0;
    
    /**
     *
     * @var Obj_Vulnerability[] 
     */
    protected $_vulnerabilities = array();
    
    /**
     * Add a information to the list of vulnerabilities. Information are not that important
     * but you should keep track of those lines anyway.
     * @param int $level Importance of this information. 1-3
     * @param string $type
     * @param string $file
     * @param int $line
     * @param PHPParser_Node $node
     */
    public function addInformation($level, $type, $node, $file, $line) {
        $level = $this->checkLevel($level);
        $this->addEntry($level, $type, $node, $file, $line);
    }
    
    /**
     * Add a information to the list of vulnerabilities. Information are not that important
     * but you should keep track of those lines anyway.
     * @param int $level Importance of this information. 1-3
     * @param string $type
     * @param string $file
     * @param int $line
     * @param PHPParser_Node $node
     */
    public function addWarning($level, $type, $node, $file, $line) {
        $level = $this->checkLevel($level);
        $this->addEntry($level*2, $type, $node, $file, $line);
    }
    
    /**
     * Add a vulnerability to the list of vulnerabilities. Vulnerabilities are
     * code sections that definitely affect the security of your application.
     * @param int $level Importance of this information. 1-3
     * @param string $type
     * @param string $file
     * @param int $line
     * @param PHPParser_Node $node
     */
    public function addVulnerability($level, $type, $node, $file, $line) {
        $level = $this->checkLevel($level);
        $this->addEntry($level*3, $type, $node, $file, $line);
        
    }
    
    private function checkLevel($level) {
        $level = (int) $level;
        return ($level <= 1) ? 1 : 
               ($level >= 3) ? 3 : 
                2;
    }
    
    /**
     * Make a new entry to the list of vulnerabilities.
     * @param int $level
     * @param string $type
     * @param PHPParser_Node $node
     * @param string $file
     * @param int $line
     */
    private function addEntry($level, $type, $node, $file, $line) {
        $v = $this->isVulnerable($node, null, $file, $line);
        
        if(!$v) {
            if($level < 4)     $this->num_information++;
            elseif($level < 7) $this->num_warnings++;
            else               $this->num_vulnerabilities++;
            
            $this->_vulnerabilities[] = new Obj_Vulnerability($level, $type, $node, $file, $line);
        }
        else {
            // TODO: vulnerability already exists. Check and add type if it differs
            
        }
    }
    
    /**
     * Check if a given node is already identified as vulnerable
     * @param PHPParser_Node $node
     * @param string $type
     * @param string $file
     * @param int $line
     * @return &Obj_Vulnerability|boolean
     */
    public function isVulnerable($node, $type=null, $file=null, $line=null) {
        foreach($this->_vulnerabilities as &$vuln) {
            if($vuln->getNode() == $node
               && (!isset($type) || $type == $vuln->getType())
               && (!isset($file) || $file == $vuln->getFile())
               && (!isset($line) || $line == $vuln->getLine())
              ) 
            {
                return $vuln;
            }
        }
        return false;
    }
    
    
    /**
     * Get the vulnerabilities found.
     * @return int
     */
    public function getVulnerabilities() {
        $return = array();
        foreach($this->_vulnerabilities as &$vuln) {
            if($vuln->getLevel() > 6) {
                $return[] = $vuln;
            }
        }
        return $return;
    }
    
    /**
     * Get the number of vulnerabilities found.
     * @return int
     */
    public function getNumVulnerabilities() {
        return $this->num_vulnerabilities;
    }
    
    /**
     * Get the number of warnings found.
     * @return int
     */
    public function getNumWarnings() {
        return $this->num_warnings;
    }
    
    /**
     * Get the number of information found.
     * @return int
     */
    public function getNumInformation() {
        return $this->num_information;
    }
    
    /**
     * Get the number of security related entries.
     * @return int
     */
    public function getNumEntries() {
        return count($this->_vulnerabilities);
    }
}